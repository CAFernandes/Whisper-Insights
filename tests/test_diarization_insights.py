#!/usr/bin/env python3
"""
Teste espec√≠fico para validar a melhoria de uso de diariza√ß√£o em insights.
Este teste cria dados simulados para verificar se a hierarquia de prioriza√ß√£o funciona.
"""

import json
import sys
import os

# Adicionar o diret√≥rio pai ao path para imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.task_service import update_task_status, get_task_info

def test_text_source_hierarchy():
    """
    Testa a hierarquia de sele√ß√£o de texto para insights:
    1. speakers_text (diariza√ß√£o) - prioridade mais alta
    2. timestamped_text (timestamps) - prioridade m√©dia
    3. text (simples) - fallback
    """

    print("üß™ TESTE: Hierarquia de Sele√ß√£o de Texto para Insights")
    print("=" * 60)

    # Simular dados de transcri√ß√£o completos
    test_task_id = "test_diarization_hierarchy"

    # Dados simulados com todas as op√ß√µes dispon√≠veis
    transcription_data = {
        'speakers_text': 'SPEAKER_00: Texto com diariza√ß√£o - maior prioridade\nSPEAKER_01: Segunda pessoa falando',
        'timestamped_text': '[00:01] Texto com timestamps - prioridade m√©dia [00:05] Continua√ß√£o com tempo',
        'combined_text': 'Texto combinado com diariza√ß√£o e timestamps',
        'speakers_summary': {
            'SPEAKER_00': {'duration': 15.0, 'percentage': 60.0},
            'SPEAKER_01': {'duration': 10.0, 'percentage': 40.0}
        }
    }

    # Criar task simulada
    task_info = {
        'task_id': test_task_id,
        'filename': 'test_audio.wav',
        'status': 'completed',
        'text': 'Texto simples - usado como fallback',
        'transcription_data': transcription_data
    }

    # Simular cada cen√°rio da hierarquia
    scenarios = [
        {
            'name': 'ü•á Cen√°rio 1: Dados completos (deve usar speakers_text)',
            'transcription_data': transcription_data,
            'expected_source': 'transcri√ß√£o com identifica√ß√£o de locutores',
            'expected_text': transcription_data['speakers_text']
        },
        {
            'name': 'ü•à Cen√°rio 2: Apenas timestamps (deve usar timestamped_text)',
            'transcription_data': {
                'timestamped_text': transcription_data['timestamped_text']
            },
            'expected_source': 'transcri√ß√£o com timestamps',
            'expected_text': transcription_data['timestamped_text']
        },
        {
            'name': 'ü•â Cen√°rio 3: Dados vazios (deve usar text simples)',
            'transcription_data': {},
            'expected_source': 'texto simples',
            'expected_text': 'Texto simples - usado como fallback'
        }
    ]

    for i, scenario in enumerate(scenarios, 1):
        print(f"\n{scenario['name']}")
        print("-" * 50)

        # Simular a l√≥gica implementada em app.py
        transcribed_text = task_info['text']  # Valor padr√£o
        text_source = "texto simples"

        # Verificar se h√° dados de transcri√ß√£o completos dispon√≠veis
        transcription_data_test = scenario['transcription_data']

        # Priorizar texto com diariza√ß√£o (mais contexto)
        if transcription_data_test.get('speakers_text'):
            transcribed_text = transcription_data_test['speakers_text']
            text_source = "transcri√ß√£o com identifica√ß√£o de locutores"
            print(f"‚úÖ Usando texto com diariza√ß√£o para insights (melhor contexto)")
        # Segunda op√ß√£o: texto com timestamps
        elif transcription_data_test.get('timestamped_text'):
            transcribed_text = transcription_data_test['timestamped_text']
            text_source = "transcri√ß√£o com timestamps"
            print(f"‚úÖ Usando texto com timestamps para insights")
        # Fallback: texto simples (j√° definido acima)
        else:
            print(f"‚úÖ Usando texto simples para insights")

        # Verificar se escolheu a fonte correta
        if text_source == scenario['expected_source']:
            print(f"‚úÖ APROVADO: Fonte correta selecionada: {text_source}")
        else:
            print(f"‚ùå FALHOU: Esperado '{scenario['expected_source']}', obteve '{text_source}'")
            return False

        # Verificar se o texto est√° correto
        if transcribed_text == scenario['expected_text']:
            print(f"‚úÖ APROVADO: Texto correto selecionado")
        else:
            print(f"‚ùå FALHOU: Texto incorreto")
            print(f"   Esperado: {scenario['expected_text'][:50]}...")
            print(f"   Obteve:   {transcribed_text[:50]}...")
            return False

        print(f"üìù Texto selecionado: {transcribed_text[:100]}...")
        print(f"üéØ Fonte: {text_source}")

    return True

def test_real_world_integration():
    """
    Teste de integra√ß√£o que simula como a melhoria funciona no contexto real
    """
    print(f"\nüåç TESTE: Integra√ß√£o no Mundo Real")
    print("=" * 50)

    # Simular um caso real onde transcription_data √© None (compatibilidade retroativa)
    print("üìù Cen√°rio: transcription_data ausente (compatibilidade retroativa)")

    task_info = {
        'text': 'Texto de fallback quando n√£o h√° transcription_data'
    }

    # L√≥gica da aplica√ß√£o real
    transcribed_text = task_info['text']
    text_source = "texto simples"

    transcription_data = task_info.get('transcription_data', {})  # Retorna {}

    if transcription_data.get('speakers_text'):
        transcribed_text = transcription_data['speakers_text']
        text_source = "transcri√ß√£o com identifica√ß√£o de locutores"
    elif transcription_data.get('timestamped_text'):
        transcribed_text = transcription_data['timestamped_text']
        text_source = "transcri√ß√£o com timestamps"

    if text_source == "texto simples":
        print("‚úÖ APROVADO: Fallback funcionando corretamente")
        print(f"üìù Texto: {transcribed_text}")
        return True
    else:
        print("‚ùå FALHOU: Fallback n√£o funcionou")
        return False

def main():
    """
    Executa todos os testes da melhoria de diariza√ß√£o em insights
    """
    print("üöÄ Iniciando Testes da Melhoria: Diariza√ß√£o em Insights")
    print("=" * 70)

    all_tests_passed = True

    # Teste 1: Hierarquia de sele√ß√£o
    if test_text_source_hierarchy():
        print(f"\n‚úÖ TESTE 1 APROVADO: Hierarquia de sele√ß√£o funcionando")
    else:
        print(f"\n‚ùå TESTE 1 FALHOU: Problema na hierarquia de sele√ß√£o")
        all_tests_passed = False

    # Teste 2: Integra√ß√£o no mundo real
    if test_real_world_integration():
        print(f"\n‚úÖ TESTE 2 APROVADO: Integra√ß√£o no mundo real funcionando")
    else:
        print(f"\n‚ùå TESTE 2 FALHOU: Problema na integra√ß√£o")
        all_tests_passed = False

    # Resultado final
    print(f"\n" + "=" * 70)
    if all_tests_passed:
        print("üéâ TODOS OS TESTES APROVADOS!")
        print("‚úÖ A melhoria de diariza√ß√£o em insights est√° funcionando corretamente")
        print("üéØ Sistema priorizar√° automaticamente:")
        print("   1. speakers_text (diariza√ß√£o) - melhor contexto")
        print("   2. timestamped_text (timestamps) - contexto m√©dio")
        print("   3. text (simples) - fallback garantido")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        print("‚ö†Ô∏è  Verifique a implementa√ß√£o da melhoria")

    return all_tests_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
